// alert('WOW ! Tu es sur ma page !');

// Deux slashs pour faire un commentaire uniligne.

/*
    Ici, je peux faire un commentaire
    sur plusieurs lignes...

    RACCOURCI : CTRL + /
            ou : CTRL + SHIFT + /
*/ 

// --1. D√©clarer une variable en JS 
var Prenom;

// -- 2. Affecter une Valeur
Prenom = "Marie-Pierre";

// -- 3. Afficher la valeur de ma variable dans la console du navigateur
console.log(Prenom); 
/* --------------------------------------------------------------------
                      LES TYPES DE VARIABLESüòÑ
-------------------------------------------------------------------- */
// -- "typeof" me permet de connaitre le type de ma variable 
console.log(typeof Prenom); 
// -- D√©claration et Affectation d'une valeur √† une variable
var Age= 22;
console.log(Age);

// -- V√©rifier son Type
console.log(typeof Age) 

/* --------------------------------------------------------------------
                      LA PORTEE DES VARIABLESüòÑ                       
    Les variables d√©clar√©es directement √† la racine du               
    fichier sont appel√©es variables "GLOBALES".                        
                                                                     
    Elles sont disponibles dans l'ensemble de votre document y compris
    dans les fonctions ou les boucles.

    La port√©e des variables GLOBALES s'arr√™tent au fichier. Si je 
    change de page, les variables n'existent plus.

    Les variables d√©clar√©es √† l'int√©rieur d'une fonction 
    sont appel√©es variables "LOCALES".

    Elles sont disponible uniquement √† l'int√©rieur de celles-ci.
-------------------------------------------------------------------- */

// -- Les varuabkes de type FLOAT 

var uneDecimale= -2.984;
console.log(uneDecimale);
console.log(typeof uneDecimale);

// -- Les Bool√©ens (VRAI / FAUX)

var unBooleen = false; // -- true
console.log(unBooleen);
console.log(typeof unBooleen);

/* --------------------------------------------------------------------
                         LES CONSTANTES
    La d√©claration CONST permet de cr√©er une constante accessible 
    UNIQUEMENT en lecture...

     Sa valeur ne pourra pas √™tre modifi√©e par des r√©affectations
     ult√©rieures. 

     Une constante ne peut pas √™tre d√©clar√©e √† nouveau. 

     G√©n√©ralement par convention, les constantes sont en MAJUSCULES.
-------------------------------------------------------------------- */

const HOST = "localhost";
const USER = "root";
const PASW = "mysql";

// je ne peux pas faire cela...
// USER = "127.0.0.1";
// TypeError: Assignment to constant variable.

/* --------------------------------------------------------------------
                         LA MINUTE INFO

  Au fur et √† mesure que l'on affecte ou r√©-affecte des valeurs
  √† une variable, celle-ci prend la nouvelle valeur et le nouveau type.
  
  En Javascript (ECMA Script - ES), les variables sont auto-typ√©es.

  Pour convertir une variable de type NUMBER en STRING et STRING en
  NUMBER, je peux utiliser les fonctions natives de javascript.
-------------------------------------------------------------------- */

console.log('---') 

var unNombre= "24";
console.log(unNombre);
console.log(typeof unNombre);

/* --
    La fonction parseInt() permet de retourner un Entier √† partir d'un STRING.
                                                                                -- */

unNombre= parseInt(unNombre);
console.log(unNombre);
console.log(typeof unNombre);

unNombre = "12.55";
console.log(unNombre);
console.log(typeof unNombre);

// -- La fonction parseFloat() permet de retourner un FLOAT √† partir d'un STRING
unNombre = parseFloat(unNombre);
console.log(unNombre); 
console.log(typeof unNombre);

// -- Conversion d'un nombre en String avec toString()
var unNombreQuiDevientString = 10;
console.log(unNombreQuiDevientString);
console.log(typeof unNombreQuiDevientString);
console.log( typeof unNombreQuiDevientString.toString() ); 
